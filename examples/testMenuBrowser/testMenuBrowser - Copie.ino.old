/*
 * file : dummyMenu.ino
 * Copyright (c) pfeuh <ze.pfeuh@gmail>
 * All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "arduinoMenu.h"

// keyboard object creation (needed by arduinoMenuBrowser)
int  kb_columns[] = {26, 24, 22, 36};
int  kb_rows[]    = {34, 32, 30, 28};
char kb_codes[]   = "123A456B789C*0#D";
MATRIX_KEYBOARD keyboard = MATRIX_KEYBOARD(kb_columns, sizeof(kb_columns) / sizeof(int), kb_rows, sizeof(kb_rows) / sizeof(int), kb_codes);

// lcd object creation (needed by arduinoMenuBrowser)
#define LCD_I2C_ADDRESS 0x27
LCD_20X4_IIC lcd(LCD_I2C_ADDRESS);

// incremental encoder creation (needed by arduinoMenuBrowser)
INCREMENTAL_ENCODER encoder = INCREMENTAL_ENCODER(4, 3, 2);

// console object creation
ARDUINO_MENU_BROWSER menu = ARDUINO_MENU_BROWSER();

// menu object creation
MENU menu = MENU();

char userData = 0;

void encoderDataAction(bool direction)
{
    if(direction == INCREMENTAL_ENCODER_DIRECTION_UP)
        userData++;
    else
        userData--;
    Serial.print(F("userData "));
    Serial.println((int)userData);
}

void encoderButtonAction(bool direction)
{
    if(direction == INCREMENTAL_ENCODER_DIRECTION_UP)
        Serial.println(F("Button pushed"));
    else
        Serial.println(F("Button released"));
}

void keyAction(byte key)
{
    switch(key)
    {
        case 'A':
            menu.gotoParent();
            //~ Serial.print(menu.getCurrentEntry());
            //~ Serial.println(" gotoParent");
            break;
        case 'B':
            menu.gotoPrevious();
            //~ Serial.print(menu.getCurrentEntry());
            //~ Serial.println(" gotoPrevious");
            break;
        case 'C':
            menu.gotoNext();
            //~ Serial.print(menu.getCurrentEntry());
            //~ Serial.println(" gotoNext");
            break;
        case 'D':
            menu.gotoChild();
            //~ Serial.print(menu.getCurrentEntry());
            //~ Serial.println(" gotoChild");
            break;
        default:
            lcd.write(key);
            break;
    }
}

//~ void keyAction(byte key)
//~ {
    //~ Serial.print("Key '");
    //~ Serial.write(key);
    //~ Serial.println("' pressed!");
    //~ lcd.write(key);
//~ }


//~ void println(const char* addr)
//~ {
    //~ char car = pgm_read_byte(addr);
    //~ while(car)
    //~ {
        //~ Serial.write(car);
        //~ car = pgm_read_byte(++addr);
    //~ }
    //~ Serial.write('\n');
//~ }

void refreshMenu()
{
    //~ lcd.clear();
    //~ lcd.home();
    //~ lcd.print(menu.getLabel(menu.getCurrentEntry()));
    Serial.println(menu.getLabel(menu.getCurrentEntry()));
    console.refresh();
    //~ println(menu.getLabel(menu.getCurrentEntry()));
}

void setup()
{
    Serial.begin(9600);
    //~ Serial.println("Hello World!");
    //~ Serial.println(menu.getLabel(0));
    //~ Serial.println(menu.getLabel(1));
    //~ Serial.println(menu.getLabel(2));

    console.begin(&keyboard, &lcd, &encoder, &menu);
    keyboard.setPushHandler(&keyAction);
    encoder.bind(&encoderDataAction, &encoderButtonAction);

    pinMode(LED_BUILTIN, OUTPUT);
    
    //~ lcd.println(menu.getLabel(0));
    //~ lcd.println(menu.getLabel(1));
    //~ lcd.println(menu.getLabel(2));
    
    menu.begin();
    menu.setRefreshCallback(&refreshMenu);
    refreshMenu();
    
}

void loop()
{
    console.sequencer();

        // let's blink status led
    if(millis() & 0x200)
        digitalWrite(LED_BUILTIN, 0);
    else
        digitalWrite(LED_BUILTIN, 1);
}
